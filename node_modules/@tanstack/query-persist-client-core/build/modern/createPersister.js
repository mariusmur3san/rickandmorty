// src/createPersister.ts
import { matchQuery } from "@tanstack/query-core";
var PERSISTER_KEY_PREFIX = "tanstack-query";
function experimental_createPersister({
  storage,
  buster = "",
  maxAge = 1e3 * 60 * 60 * 24,
  serialize = JSON.stringify,
  deserialize = JSON.parse,
  prefix = PERSISTER_KEY_PREFIX,
  filters
}) {
  return async function persisterFn(queryFn, context, query) {
    const storageKey = `${prefix}-${query.queryHash}`;
    const matchesFilter = filters ? matchQuery(filters, query) : true;
    if (matchesFilter && query.state.data === void 0 && storage != null) {
      try {
        const storedData = await storage.getItem(storageKey);
        if (storedData) {
          const persistedQuery = await deserialize(storedData);
          if (persistedQuery.state.dataUpdatedAt) {
            const queryAge = Date.now() - persistedQuery.state.dataUpdatedAt;
            const expired = queryAge > maxAge;
            const busted = persistedQuery.buster !== buster;
            if (expired || busted) {
              await storage.removeItem(storageKey);
            } else {
              setTimeout(() => {
                query.setState({
                  dataUpdatedAt: persistedQuery.state.dataUpdatedAt,
                  errorUpdatedAt: persistedQuery.state.errorUpdatedAt
                });
                if (query.isStale()) {
                  query.fetch();
                }
              }, 0);
              return Promise.resolve(persistedQuery.state.data);
            }
          } else {
            await storage.removeItem(storageKey);
          }
        }
      } catch (err) {
        if (process.env.NODE_ENV === "development") {
          console.error(err);
          console.warn(
            "Encountered an error attempting to restore query cache from persisted location."
          );
        }
        await storage.removeItem(storageKey);
      }
    }
    const queryFnResult = await queryFn(context);
    if (matchesFilter && storage != null) {
      setTimeout(async () => {
        storage.setItem(
          storageKey,
          await serialize({
            state: query.state,
            queryKey: query.queryKey,
            queryHash: query.queryHash,
            buster
          })
        );
      }, 0);
    }
    return Promise.resolve(queryFnResult);
  };
}
export {
  PERSISTER_KEY_PREFIX,
  experimental_createPersister
};
//# sourceMappingURL=createPersister.js.map